{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "practice-df-m630"
		},
		"ls_blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_blob'"
		},
		"ls_db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_db'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Append Variable Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Appending variable to a array",
						"type": "AppendVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Marks",
							"value": {
								"value": "@int(90)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Assigning append variable output to temp variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Appending variable to a array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "temp",
							"value": {
								"value": "@variables('Marks')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Marks": {
						"type": "Array",
						"defaultValue": [
							89,
							50,
							78,
							40
						]
					},
					"temp": {
						"type": "Array",
						"defaultValue": []
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-21T13:48:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append Variable Practice')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append 90 to the array",
						"type": "AppendVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Marks",
							"value": {
								"value": "@int(90)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Append 90 to the array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "X",
							"value": {
								"value": "@variables('Marks')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Marks": {
						"type": "Array",
						"defaultValue": [
							12,
							15,
							19,
							24
						]
					},
					"X": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-28T06:15:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Activity Practice')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copying data from Sql data base to Blob storage",
				"activities": [
					{
						"name": "Copy data from Sql data base to Blob storage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sqlEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_practice",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-28T05:39:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlEMPTable')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_practice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Emp_Names_Foreach')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get emp table details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from emp",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sqlEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get emp table details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get emp table details').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Ename",
										"value": {
											"value": "@item().ename",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "show Enames",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Ename_Dest",
							"value": {
								"value": "@variables('Ename')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Ename": {
						"type": "Array",
						"defaultValue": []
					},
					"Ename_Dest": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Scenarios"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T09:33:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlEMPTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Emp_Names_Foreach_Logs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Starting_Logs",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[efn].[usp_PipelineStartLogs]",
								"storedProcedureParameters": {
									"pipelinename": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"runid": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"status": {
										"type": "String",
										"value": {
											"value": "@variables('Starting_Status')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sqlEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute required pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Starting_Logs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Scenario2-squarecalculation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Succesful Ending Logs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute required pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[efn].[usp_PipelineEndLogs]",
							"storedProcedureParameters": {
								"errormsg": {
									"value": null,
									"type": "String"
								},
								"id": {
									"value": {
										"value": "@activity('Starting_Logs').output.value[0].id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"status": {
									"value": "Success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failed Ending Logs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute required pipeline",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[efn].[usp_PipelineEndLogs]",
							"storedProcedureParameters": {
								"errormsg": {
									"value": {
										"value": "@activity('Execute required pipeline').Error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"id": {
									"value": {
										"value": "@activity('Starting_Logs').output.value[0].id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"status": {
									"value": {
										"value": "@variables('End_Failed_Status')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Ename": {
						"type": "Array",
						"defaultValue": []
					},
					"Ename_Dest": {
						"type": "Array"
					},
					"Starting_Status": {
						"type": "String",
						"defaultValue": "Running"
					},
					"End_Success_Status": {
						"type": "String",
						"defaultValue": "Success"
					},
					"End_Failed_Status": {
						"type": "String",
						"defaultValue": "Failed"
					}
				},
				"folder": {
					"name": "Scenarios"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-29T08:35:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlEMPTable')]",
				"[concat(variables('factoryId'), '/pipelines/Scenario2-squarecalculation')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Emp_Names_Until')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get emp table details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from emp",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sqlEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "get emp table details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('Var X'),sub(activity('get emp table details').output.count,1))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Initialize variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set temp",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Ename",
										"value": {
											"value": "@activity('get emp table details').output.value[variables('temp')].ename",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set temp",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "temp",
										"value": {
											"value": "@variables('Var X')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Increase value by 1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Assigning those Enames to Array",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Var X",
										"value": {
											"value": "@add(variables('temp'),1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Assigning those Enames to Array",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Initialize variable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Ename_Array",
										"value": {
											"value": "@variables('Ename')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "display Ename Array",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Final_Array",
							"value": {
								"value": "@variables('Ename_Array')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Var X": {
						"type": "Integer",
						"defaultValue": 0
					},
					"Table_Array": {
						"type": "Array"
					},
					"table": {
						"type": "Array"
					},
					"temp": {
						"type": "Integer"
					},
					"Ename": {
						"type": "String"
					},
					"Ename_Array": {
						"type": "Array"
					},
					"Final_Array": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Scenarios"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T11:14:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlEMPTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForEach_HW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('Source')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Destination",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Dest",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Append variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Temp",
										"value": {
											"value": "@variables('Dest')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Source": {
						"type": "Array",
						"defaultValue": [
							"ADF",
							"Databricks",
							"Synapse",
							"LogicApp"
						]
					},
					"Destination": {
						"type": "String"
					},
					"Dest": {
						"type": "Array"
					},
					"Temp": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Scenarios"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T06:02:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Foreach_Class')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('numbers')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Result",
										"value": {
											"value": "@{mul(item(),2)}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Test",
										"value": {
											"value": "@variables('Result')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Append variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Test1",
										"value": {
											"value": "@variables('Test')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"numbers": {
						"type": "Array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5
						]
					},
					"Result": {
						"type": "String"
					},
					"Dest": {
						"type": "Array"
					},
					"Temp": {
						"type": "Array"
					},
					"Test": {
						"type": "Array"
					},
					"Test1": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-28T06:41:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetMetadtaActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"exists",
								"itemName",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-21T13:54:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Logs_area_calculation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "calcualte Area",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Starting_area_calculation_logs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Area",
							"value": {
								"value": "@mul(variables('Breadth'),variables('Length'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Starting_area_calculation_logs",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[efn].[usp_PipelineStartLogs]",
								"storedProcedureParameters": {
									"pipelinename": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"runid": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									"status": {
										"type": "String",
										"value": {
											"value": "@variables('Pipeline_Start_Status')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sqlEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Success_Logs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "calcualte Area",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[efn].[usp_PipelineEndLogs]",
							"storedProcedureParameters": {
								"errormsg": {
									"value": null,
									"type": "String"
								},
								"id": {
									"value": {
										"value": "@activity('Starting_area_calculation_logs').output.value[0].id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"status": {
									"value": {
										"value": "@variables('Success_Status')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failed_Logs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "calcualte Area",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[efn].[usp_PipelineEndLogs]",
							"storedProcedureParameters": {
								"errormsg": {
									"value": {
										"value": "@activity('calcualte Area').Error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"id": {
									"value": {
										"value": "@activity('Starting_area_calculation_logs').output.value[0].id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"status": {
									"value": {
										"value": "@variables('Failed_Status')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Area": {
						"type": "Integer"
					},
					"Length": {
						"type": "Integer",
						"defaultValue": 10
					},
					"Breadth": {
						"type": "Integer",
						"defaultValue": 5
					},
					"Pipeline_Start_Status": {
						"type": "String",
						"defaultValue": "Running"
					},
					"Success_Status": {
						"type": "String",
						"defaultValue": "Success"
					},
					"Failed_Status": {
						"type": "String",
						"defaultValue": "Failed"
					}
				},
				"folder": {
					"name": "Scenarios"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-29T09:05:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlEMPTable')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Logs_square_calculation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Calculation of Squares",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "x",
							"value": {
								"value": "@mul(add(variables('a'),variables('a')),add(variables('b'),variables('b')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Logs_area_calculation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Calculation of Squares",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Logs_area_calculation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"a": {
						"type": "Integer",
						"defaultValue": 5
					},
					"b": {
						"type": "Integer",
						"defaultValue": 10
					},
					"x": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "Scenarios"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-31T06:21:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Logs_area_calculation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookupactivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select empno,ename,sal from dbo.emp\nwhere deptno=10",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sqlEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-21T14:01:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlEMPTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookupactivity_Homework')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "while fetching data from sql server in where clause we mentioned manually 10 or 20 or 30, now we need to keep this dynamically how to do this?",
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from dbo.emp where deptno= @{variables('deptno')}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sqlEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "deptno",
							"value": [
								10,
								20,
								30
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"deptno": {
						"type": "Array",
						"defaultValue": [
							10,
							20,
							30
						]
					}
				},
				"folder": {
					"name": "Scenarios"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T06:02:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlEMPTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Moving data from one blob storage to another')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_blob_data_parameter1",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob_destination",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-28T08:16:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_data')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_data_parameter1')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL Server to Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SQL Server to Blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sqlEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "emptable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-14T11:52:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlEMPTable')]",
				"[concat(variables('factoryId'), '/datasets/emptable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Scenario-If activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "what will be the current bill, if units are less than 200 then unit price 5 , if units are greater than 200 then unit price is 7.",
				"activities": [
					{
						"name": "check how many units consumed",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(pipeline().parameters.units,200)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Current_Bill",
										"value": {
											"value": "@mul(sub(200,pipeline().parameters.units),variables('unitprice1'))",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Current_Bill",
										"value": {
											"value": "@add(mul(200,variables('unitprice1')),mul(sub(pipeline().parameters.units,200),variables('unitprice2')))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"units": {
						"type": "int"
					}
				},
				"variables": {
					"unitprice1": {
						"type": "Integer",
						"defaultValue": 5
					},
					"unitprice2": {
						"type": "Integer",
						"defaultValue": 7
					},
					"Current_Bill": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "Scenarios"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T14:15:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Scenario-Move files from one container to anothe container')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get filenames from Blob",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get filenames from Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get filenames from Blob').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_blob_data_parameter",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob_destination",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Scenarios"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T06:37:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_data')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_data_parameter')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Scenario-Switch Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "There are four slabs, slab 1 to4 . slab 1 is less than 200, slab 2 is between 200 to 300, slab 3 is between 300 to 400 and slab 4 is \tgretaer than 400. unit price in slab 1 is 5 and in second is 7 and in third is 7 and in fourth is 11. calculate current bill.",
				"activities": [
					{
						"name": "Calculate Current bill based on slab",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(lessOrEquals(pipeline().parameters.Units,200),'Slab1',\nif(lessOrEquals(pipeline().parameters.Units,300),'Slab2',\nif(lessOrEquals(pipeline().parameters.Units,400),'Slab3',\nif(greater(pipeline().parameters.Units,400),'Slab4','0'))))",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Slab1",
									"activities": [
										{
											"name": "Set variable1",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "Current_Bill",
												"value": {
													"value": "@mul(pipeline().parameters.Units,variables('unitprice1'))",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Slab2",
									"activities": [
										{
											"name": "Set variable2",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "Current_Bill",
												"value": {
													"value": "@add(mul(200,variables('unitprice1')),\nmul(sub(pipeline().parameters.Units,200),variables('unitprice2')))",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Slab3",
									"activities": [
										{
											"name": "Set variable3",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "Current_Bill",
												"value": {
													"value": "@add(add(mul(200,variables('unitprice1')),\nmul(100,variables('unitprice2'))),\nmul(sub(pipeline().parameters.Units,300),variables('unitprice3')))",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Slab4",
									"activities": [
										{
											"name": "Set variable4",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "Current_Bill",
												"value": {
													"value": "@add(mul(sub(pipeline().parameters.Units,200),variables('unitprice4')),2600)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Units": {
						"type": "int"
					}
				},
				"variables": {
					"unitprice1": {
						"type": "Integer",
						"defaultValue": 5
					},
					"unitprice2": {
						"type": "Integer",
						"defaultValue": 7
					},
					"unitprice3": {
						"type": "Integer",
						"defaultValue": 9
					},
					"unitprice4": {
						"type": "Integer",
						"defaultValue": 11
					},
					"Current_Bill": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "Scenarios"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T14:43:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Scenario1-rectangle area calculation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set length",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "length",
							"value": "10"
						}
					},
					{
						"name": "Set breadth",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "breadth",
							"value": "5"
						}
					},
					{
						"name": "calcualte Area",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set length",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set breadth",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Area",
							"value": {
								"value": "@string(mul(int(variables('breadth')),int(variables('length'))))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Area": {
						"type": "String"
					},
					"length": {
						"type": "String"
					},
					"breadth": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Scenarios"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T06:02:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Scenario2-squarecalculation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set a value",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "a",
							"value": "10"
						}
					},
					{
						"name": "Set b value",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "b",
							"value": "5"
						}
					},
					{
						"name": "Calculation of Squares",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set a value",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set b value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "x",
							"value": {
								"value": "@{mul(add(int(variables('b')),int(variables('a'))),add(int(variables('b')),int(variables('a'))))}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"a": {
						"type": "String"
					},
					"b": {
						"type": "String"
					},
					"x": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Scenarios"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T06:02:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Set variable_practice')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Calculate Square of the a plus b",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "X",
							"value": {
								"value": "@add(add(mul(variables('a'),variables('a')),mul(variables('b'),variables('b'))),\r\nmul(2,mul(variables('a'),variables('b'))))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"a": {
						"type": "Integer",
						"defaultValue": 5
					},
					"b": {
						"type": "Integer",
						"defaultValue": 10
					},
					"X": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "Practice"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-28T05:49:56Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Until_Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Initialize Variable X",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "VarX",
							"value": 1
						}
					},
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Initialize Variable X",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(variables('VarX'),5)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set Temp Variable",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Temp",
										"value": {
											"value": "@variables('VarX')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Increasing the VarX value",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Temp Variable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "VarX",
										"value": {
											"value": "@add(variables('Temp'),1)",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"VarX": {
						"type": "Integer"
					},
					"Temp": {
						"type": "Integer"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T09:24:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPNO",
						"type": "String"
					},
					{
						"name": "ENAME",
						"type": "String"
					},
					{
						"name": "JOB",
						"type": "String"
					},
					{
						"name": "MGR",
						"type": "String"
					},
					{
						"name": "HIREDATE",
						"type": "String"
					},
					{
						"name": "SAL",
						"type": "String"
					},
					{
						"name": "COMM",
						"type": "String"
					},
					{
						"name": "DEPTNO",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPNO",
						"type": "String"
					},
					{
						"name": "ENAME",
						"type": "String"
					},
					{
						"name": "JOB",
						"type": "String"
					},
					{
						"name": "MGR",
						"type": "String"
					},
					{
						"name": "HIREDATE",
						"type": "String"
					},
					{
						"name": "SAL",
						"type": "String"
					},
					{
						"name": "COMM",
						"type": "String"
					},
					{
						"name": "DEPTNO",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_data1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPNO",
						"type": "String"
					},
					{
						"name": "ENAME",
						"type": "String"
					},
					{
						"name": "JOB",
						"type": "String"
					},
					{
						"name": "MGR",
						"type": "String"
					},
					{
						"name": "HIREDATE",
						"type": "String"
					},
					{
						"name": "SAL",
						"type": "String"
					},
					{
						"name": "COMM",
						"type": "String"
					},
					{
						"name": "DEPTNO",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_data_parameter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPNO",
						"type": "String"
					},
					{
						"name": "ENAME",
						"type": "String"
					},
					{
						"name": "JOB",
						"type": "String"
					},
					{
						"name": "MGR",
						"type": "String"
					},
					{
						"name": "HIREDATE",
						"type": "String"
					},
					{
						"name": "SAL",
						"type": "String"
					},
					{
						"name": "COMM",
						"type": "String"
					},
					{
						"name": "DEPTNO",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_data_parameter1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPNO",
						"type": "String"
					},
					{
						"name": "ENAME",
						"type": "String"
					},
					{
						"name": "JOB",
						"type": "String"
					},
					{
						"name": "MGR",
						"type": "String"
					},
					{
						"name": "HIREDATE",
						"type": "String"
					},
					{
						"name": "SAL",
						"type": "String"
					},
					{
						"name": "COMM",
						"type": "String"
					},
					{
						"name": "DEPTNO",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "destination"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_practice')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "practice_Employee",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPNO",
						"type": "String"
					},
					{
						"name": "ENAME",
						"type": "String"
					},
					{
						"name": "JOB",
						"type": "String"
					},
					{
						"name": "MGR",
						"type": "String"
					},
					{
						"name": "HIREDATE",
						"type": "String"
					},
					{
						"name": "SAL",
						"type": "String"
					},
					{
						"name": "COMM",
						"type": "String"
					},
					{
						"name": "DEPTNO",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/empscript')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EMP_Table.txt",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CREATE TABLE EMP",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/emptable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emptable",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqlEMPTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EMPNO",
						"type": "decimal",
						"precision": 4,
						"scale": 0
					},
					{
						"name": "ENAME",
						"type": "varchar"
					},
					{
						"name": "JOB",
						"type": "varchar"
					},
					{
						"name": "MGR",
						"type": "decimal",
						"precision": 4,
						"scale": 0
					},
					{
						"name": "HIREDATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SAL",
						"type": "decimal",
						"precision": 7,
						"scale": 2
					},
					{
						"name": "COMM",
						"type": "decimal",
						"precision": 7,
						"scale": 2
					},
					{
						"name": "DEPTNO",
						"type": "decimal",
						"precision": 2,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "EMP"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_blob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_db_connectionString')]"
				}
			},
			"dependsOn": []
		}
	]
}